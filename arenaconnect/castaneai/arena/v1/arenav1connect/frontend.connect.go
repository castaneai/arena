// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: castaneai/arena/v1/frontend.proto

package arenav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/castaneai/arena/arenaconnect/castaneai/arena/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FrontendServiceName is the fully-qualified name of the FrontendService service.
	FrontendServiceName = "castaneai.arena.v1.FrontendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FrontendServiceAllocateRoomProcedure is the fully-qualified name of the FrontendService's
	// AllocateRoom RPC.
	FrontendServiceAllocateRoomProcedure = "/castaneai.arena.v1.FrontendService/AllocateRoom"
	// FrontendServiceGetRoomResultProcedure is the fully-qualified name of the FrontendService's
	// GetRoomResult RPC.
	FrontendServiceGetRoomResultProcedure = "/castaneai.arena.v1.FrontendService/GetRoomResult"
)

// FrontendServiceClient is a client for the castaneai.arena.v1.FrontendService service.
type FrontendServiceClient interface {
	AllocateRoom(context.Context, *connect.Request[v1.AllocateRoomRequest]) (*connect.Response[v1.AllocateRoomResponse], error)
	GetRoomResult(context.Context, *connect.Request[v1.GetRoomResultRequest]) (*connect.Response[v1.GetRoomResultResponse], error)
}

// NewFrontendServiceClient constructs a client for the castaneai.arena.v1.FrontendService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFrontendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FrontendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	frontendServiceMethods := v1.File_castaneai_arena_v1_frontend_proto.Services().ByName("FrontendService").Methods()
	return &frontendServiceClient{
		allocateRoom: connect.NewClient[v1.AllocateRoomRequest, v1.AllocateRoomResponse](
			httpClient,
			baseURL+FrontendServiceAllocateRoomProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("AllocateRoom")),
			connect.WithClientOptions(opts...),
		),
		getRoomResult: connect.NewClient[v1.GetRoomResultRequest, v1.GetRoomResultResponse](
			httpClient,
			baseURL+FrontendServiceGetRoomResultProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetRoomResult")),
			connect.WithClientOptions(opts...),
		),
	}
}

// frontendServiceClient implements FrontendServiceClient.
type frontendServiceClient struct {
	allocateRoom  *connect.Client[v1.AllocateRoomRequest, v1.AllocateRoomResponse]
	getRoomResult *connect.Client[v1.GetRoomResultRequest, v1.GetRoomResultResponse]
}

// AllocateRoom calls castaneai.arena.v1.FrontendService.AllocateRoom.
func (c *frontendServiceClient) AllocateRoom(ctx context.Context, req *connect.Request[v1.AllocateRoomRequest]) (*connect.Response[v1.AllocateRoomResponse], error) {
	return c.allocateRoom.CallUnary(ctx, req)
}

// GetRoomResult calls castaneai.arena.v1.FrontendService.GetRoomResult.
func (c *frontendServiceClient) GetRoomResult(ctx context.Context, req *connect.Request[v1.GetRoomResultRequest]) (*connect.Response[v1.GetRoomResultResponse], error) {
	return c.getRoomResult.CallUnary(ctx, req)
}

// FrontendServiceHandler is an implementation of the castaneai.arena.v1.FrontendService service.
type FrontendServiceHandler interface {
	AllocateRoom(context.Context, *connect.Request[v1.AllocateRoomRequest]) (*connect.Response[v1.AllocateRoomResponse], error)
	GetRoomResult(context.Context, *connect.Request[v1.GetRoomResultRequest]) (*connect.Response[v1.GetRoomResultResponse], error)
}

// NewFrontendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFrontendServiceHandler(svc FrontendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	frontendServiceMethods := v1.File_castaneai_arena_v1_frontend_proto.Services().ByName("FrontendService").Methods()
	frontendServiceAllocateRoomHandler := connect.NewUnaryHandler(
		FrontendServiceAllocateRoomProcedure,
		svc.AllocateRoom,
		connect.WithSchema(frontendServiceMethods.ByName("AllocateRoom")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetRoomResultHandler := connect.NewUnaryHandler(
		FrontendServiceGetRoomResultProcedure,
		svc.GetRoomResult,
		connect.WithSchema(frontendServiceMethods.ByName("GetRoomResult")),
		connect.WithHandlerOptions(opts...),
	)
	return "/castaneai.arena.v1.FrontendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FrontendServiceAllocateRoomProcedure:
			frontendServiceAllocateRoomHandler.ServeHTTP(w, r)
		case FrontendServiceGetRoomResultProcedure:
			frontendServiceGetRoomResultHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFrontendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFrontendServiceHandler struct{}

func (UnimplementedFrontendServiceHandler) AllocateRoom(context.Context, *connect.Request[v1.AllocateRoomRequest]) (*connect.Response[v1.AllocateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("castaneai.arena.v1.FrontendService.AllocateRoom is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetRoomResult(context.Context, *connect.Request[v1.GetRoomResultRequest]) (*connect.Response[v1.GetRoomResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("castaneai.arena.v1.FrontendService.GetRoomResult is not implemented"))
}
