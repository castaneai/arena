// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend.proto

package arenaconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackendServiceName is the fully-qualified name of the BackendService service.
	BackendServiceName = "arena.BackendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackendServiceAddRoomGroupProcedure is the fully-qualified name of the BackendService's
	// AddRoomGroup RPC.
	BackendServiceAddRoomGroupProcedure = "/arena.BackendService/AddRoomGroup"
	// BackendServiceDeleteRoomGroupProcedure is the fully-qualified name of the BackendService's
	// DeleteRoomGroup RPC.
	BackendServiceDeleteRoomGroupProcedure = "/arena.BackendService/DeleteRoomGroup"
	// BackendServiceSetRoomResultProcedure is the fully-qualified name of the BackendService's
	// SetRoomResult RPC.
	BackendServiceSetRoomResultProcedure = "/arena.BackendService/SetRoomResult"
	// BackendServiceFreeRoomProcedure is the fully-qualified name of the BackendService's FreeRoom RPC.
	BackendServiceFreeRoomProcedure = "/arena.BackendService/FreeRoom"
)

// BackendServiceClient is a client for the arena.BackendService service.
type BackendServiceClient interface {
	AddRoomGroup(context.Context, *connect.Request[AddRoomGroupRequest]) (*connect.ServerStreamForClient[AddRoomGroupResponse], error)
	DeleteRoomGroup(context.Context, *connect.Request[DeleteRoomGroupRequest]) (*connect.Response[DeleteRoomGroupResponse], error)
	SetRoomResult(context.Context, *connect.Request[SetRoomResultRequest]) (*connect.Response[SetRoomResultResponse], error)
	FreeRoom(context.Context, *connect.Request[FreeRoomRequest]) (*connect.Response[FreeRoomResponse], error)
}

// NewBackendServiceClient constructs a client for the arena.BackendService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	backendServiceMethods := File_backend_proto.Services().ByName("BackendService").Methods()
	return &backendServiceClient{
		addRoomGroup: connect.NewClient[AddRoomGroupRequest, AddRoomGroupResponse](
			httpClient,
			baseURL+BackendServiceAddRoomGroupProcedure,
			connect.WithSchema(backendServiceMethods.ByName("AddRoomGroup")),
			connect.WithClientOptions(opts...),
		),
		deleteRoomGroup: connect.NewClient[DeleteRoomGroupRequest, DeleteRoomGroupResponse](
			httpClient,
			baseURL+BackendServiceDeleteRoomGroupProcedure,
			connect.WithSchema(backendServiceMethods.ByName("DeleteRoomGroup")),
			connect.WithClientOptions(opts...),
		),
		setRoomResult: connect.NewClient[SetRoomResultRequest, SetRoomResultResponse](
			httpClient,
			baseURL+BackendServiceSetRoomResultProcedure,
			connect.WithSchema(backendServiceMethods.ByName("SetRoomResult")),
			connect.WithClientOptions(opts...),
		),
		freeRoom: connect.NewClient[FreeRoomRequest, FreeRoomResponse](
			httpClient,
			baseURL+BackendServiceFreeRoomProcedure,
			connect.WithSchema(backendServiceMethods.ByName("FreeRoom")),
			connect.WithClientOptions(opts...),
		),
	}
}

// backendServiceClient implements BackendServiceClient.
type backendServiceClient struct {
	addRoomGroup    *connect.Client[AddRoomGroupRequest, AddRoomGroupResponse]
	deleteRoomGroup *connect.Client[DeleteRoomGroupRequest, DeleteRoomGroupResponse]
	setRoomResult   *connect.Client[SetRoomResultRequest, SetRoomResultResponse]
	freeRoom        *connect.Client[FreeRoomRequest, FreeRoomResponse]
}

// AddRoomGroup calls arena.BackendService.AddRoomGroup.
func (c *backendServiceClient) AddRoomGroup(ctx context.Context, req *connect.Request[AddRoomGroupRequest]) (*connect.ServerStreamForClient[AddRoomGroupResponse], error) {
	return c.addRoomGroup.CallServerStream(ctx, req)
}

// DeleteRoomGroup calls arena.BackendService.DeleteRoomGroup.
func (c *backendServiceClient) DeleteRoomGroup(ctx context.Context, req *connect.Request[DeleteRoomGroupRequest]) (*connect.Response[DeleteRoomGroupResponse], error) {
	return c.deleteRoomGroup.CallUnary(ctx, req)
}

// SetRoomResult calls arena.BackendService.SetRoomResult.
func (c *backendServiceClient) SetRoomResult(ctx context.Context, req *connect.Request[SetRoomResultRequest]) (*connect.Response[SetRoomResultResponse], error) {
	return c.setRoomResult.CallUnary(ctx, req)
}

// FreeRoom calls arena.BackendService.FreeRoom.
func (c *backendServiceClient) FreeRoom(ctx context.Context, req *connect.Request[FreeRoomRequest]) (*connect.Response[FreeRoomResponse], error) {
	return c.freeRoom.CallUnary(ctx, req)
}

// BackendServiceHandler is an implementation of the arena.BackendService service.
type BackendServiceHandler interface {
	AddRoomGroup(context.Context, *connect.Request[AddRoomGroupRequest], *connect.ServerStream[AddRoomGroupResponse]) error
	DeleteRoomGroup(context.Context, *connect.Request[DeleteRoomGroupRequest]) (*connect.Response[DeleteRoomGroupResponse], error)
	SetRoomResult(context.Context, *connect.Request[SetRoomResultRequest]) (*connect.Response[SetRoomResultResponse], error)
	FreeRoom(context.Context, *connect.Request[FreeRoomRequest]) (*connect.Response[FreeRoomResponse], error)
}

// NewBackendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackendServiceHandler(svc BackendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backendServiceMethods := File_backend_proto.Services().ByName("BackendService").Methods()
	backendServiceAddRoomGroupHandler := connect.NewServerStreamHandler(
		BackendServiceAddRoomGroupProcedure,
		svc.AddRoomGroup,
		connect.WithSchema(backendServiceMethods.ByName("AddRoomGroup")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceDeleteRoomGroupHandler := connect.NewUnaryHandler(
		BackendServiceDeleteRoomGroupProcedure,
		svc.DeleteRoomGroup,
		connect.WithSchema(backendServiceMethods.ByName("DeleteRoomGroup")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceSetRoomResultHandler := connect.NewUnaryHandler(
		BackendServiceSetRoomResultProcedure,
		svc.SetRoomResult,
		connect.WithSchema(backendServiceMethods.ByName("SetRoomResult")),
		connect.WithHandlerOptions(opts...),
	)
	backendServiceFreeRoomHandler := connect.NewUnaryHandler(
		BackendServiceFreeRoomProcedure,
		svc.FreeRoom,
		connect.WithSchema(backendServiceMethods.ByName("FreeRoom")),
		connect.WithHandlerOptions(opts...),
	)
	return "/arena.BackendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackendServiceAddRoomGroupProcedure:
			backendServiceAddRoomGroupHandler.ServeHTTP(w, r)
		case BackendServiceDeleteRoomGroupProcedure:
			backendServiceDeleteRoomGroupHandler.ServeHTTP(w, r)
		case BackendServiceSetRoomResultProcedure:
			backendServiceSetRoomResultHandler.ServeHTTP(w, r)
		case BackendServiceFreeRoomProcedure:
			backendServiceFreeRoomHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackendServiceHandler struct{}

func (UnimplementedBackendServiceHandler) AddRoomGroup(context.Context, *connect.Request[AddRoomGroupRequest], *connect.ServerStream[AddRoomGroupResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("arena.BackendService.AddRoomGroup is not implemented"))
}

func (UnimplementedBackendServiceHandler) DeleteRoomGroup(context.Context, *connect.Request[DeleteRoomGroupRequest]) (*connect.Response[DeleteRoomGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arena.BackendService.DeleteRoomGroup is not implemented"))
}

func (UnimplementedBackendServiceHandler) SetRoomResult(context.Context, *connect.Request[SetRoomResultRequest]) (*connect.Response[SetRoomResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arena.BackendService.SetRoomResult is not implemented"))
}

func (UnimplementedBackendServiceHandler) FreeRoom(context.Context, *connect.Request[FreeRoomRequest]) (*connect.Response[FreeRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("arena.BackendService.FreeRoom is not implemented"))
}
